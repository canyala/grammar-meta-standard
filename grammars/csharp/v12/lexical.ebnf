(* C# 12 Lexical Grammar *)

identifier ::= letter { letter | digit } ;

letter ::= 'a'..'z' | 'A'..'Z' | '_' ;

digit ::= '0'..'9' ;

whitespace ::= ' ' | '\t' | '\n' | '\r' ;

newline ::= '\r\n' | '\r' | '\n' ;

single-line-comment ::= '//' { any-character-except-newline } ;

multi-line-comment ::= '/*' { any-character-except-'*/' } '*/' ;

string-literal ::= regular-string
  | verbatim-string ;

regular-string ::= '"' { character | escape-sequence } '"' ;

verbatim-string ::= '@"' { character | '""' } '"' ;

character-literal ::= ''' ( character | escape-sequence ) ''' ;

escape-sequence ::= '\\' | '\"' | '\'' | '\n' | '\t' | '\r' ;

boolean-literal ::= 'true' | 'false' ;

null-literal ::= 'null' ;

keyword ::= 'class' | 'struct' | 'interface' | 'enum'
  | 'public' | 'private' | 'protected' | 'internal'
  | 'if' | 'else' | 'for' | 'while' | 'return' ;

literal ::= boolean-literal | null-literal | integer-literal | string-literal | character-literal ;

integer-literal ::= digit { digit } ;
