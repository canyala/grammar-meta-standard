(* C# 13 Syntax Grammar *)

compilation-unit ::= { using-directive } { namespace-member-declaration } ;

using-directive ::= 'using' qualified-identifier ';' ;

qualified-identifier ::= identifier { '.' identifier } ;

namespace-member-declaration ::= namespace-declaration
  | type-declaration ;

namespace-declaration ::= 'namespace' qualified-identifier
    '{' { namespace-member-declaration } '}' ;

type-declaration ::= class-declaration
  | struct-declaration ;

class-declaration ::= attributes? modifiers? 'class' identifier
    base-class? type-parameter-list?
    '{' { class-member-declaration } '}' ;

class-member-declaration ::= method-declaration
  | field-declaration
  | constructor-declaration ;

method-declaration ::= attributes? modifiers? type identifier
    '(' parameter-list? ')'
    block ;

constructor-declaration ::= attributes? modifiers? identifier
    '(' parameter-list? ')'
    block ;

field-declaration ::= attributes? modifiers? type variable-declarator-list ';' ;

type ::= predefined-type | identifier ;

predefined-type ::= 'int' | 'string' | 'bool' | 'void' ;

variable-declarator-list ::= variable-declarator { ',' variable-declarator } ;

variable-declarator ::= identifier [ '=' expression ] ;

parameter-list ::= parameter { ',' parameter } ;

parameter ::= attributes? modifiers? type identifier ;

attributes ::= '[' attribute { ',' attribute } ']' ;

attribute ::= identifier ;

modifiers ::= modifier { modifier } ;

modifier ::= 'public' | 'private' | 'static' | 'readonly' ;

expression ::= assignment-expression ;

assignment-expression ::= conditional-expression
  | identifier '=' expression ;

conditional-expression ::= logical-or-expression [ '?' expression ':' expression ] ;

logical-or-expression ::= logical-and-expression { '||' logical-and-expression } ;

logical-and-expression ::= equality-expression { '&&' equality-expression } ;

equality-expression ::= relational-expression { ('==' | '!=') relational-expression } ;

relational-expression ::= additive-expression { ('<' | '<=' | '>' | '>=') additive-expression } ;

additive-expression ::= multiplicative-expression { ('+' | '-') multiplicative-expression } ;

multiplicative-expression ::= unary-expression { ('*' | '/' | '%') unary-expression } ;

unary-expression ::= primary-expression
  | ('+' | '-' | '!') unary-expression ;

primary-expression ::= literal
  | identifier
  | '(' expression ')'
  | invocation-expression ;

invocation-expression ::= primary-expression '(' argument-list? ')' ;

argument-list ::= expression { ',' expression } ;

block ::= '{' { statement } '}' ;

statement ::= declaration-statement
  | expression-statement
  | selection-statement
  | iteration-statement
  | block ;

declaration-statement ::= local-variable-declaration ';' ;

local-variable-declaration ::= type variable-declarator-list ;

expression-statement ::= expression ';' ;

selection-statement ::= 'if' '(' expression ')' statement [ 'else' statement ] ;

iteration-statement ::= 'for' '(' for-initializer? ';' expression? ';' expression? ')' statement ;

for-initializer ::= local-variable-declaration
  | expression-statement ;
